@page "/play"

<PageTitle>Cahoots</PageTitle>

<article class="@Styles.Container">
    <div class="w-full flex flex-col">
        <CascadingValue Value="game">

            <div class="max-w-3xl flex justify-between items-center py-2 px-4 md:px-8">

                <div class="font-bold text-sm md:text-base xl:text-xl">
                    <span></span>
                </div>


                @if (game.CompletedMissions.Any())
                {
                    <button class="@Styles.SecondaryInlineButton" @onclick="() => dialog.Show()">
                        @game.CompletedMissions.Count missions
                    </button>
                }

            </div>

            <div class="max-w-3xl grid grid-cols-@game.AvaliableMissions.Count gap-2 my-2">

                @foreach (var mission in game.AvaliableMissions)
                {
                    <div class="flex justify-center">
                        <MissionCard InnerMission="mission" />
                    </div>
                }
            </div>

            <Piles @ref="pilesComponent" OnCardPlayed="CardPlayed" />

            @if (game.GameHasEnded())
            {
                <div class="flex flex-col justify-center p-8 space-y-2">
                    <h6 class="font-bold text-xl color-slate-700">End of game</h6>
                    <p class="tracking-wider font-thin color-slate-500">@game.CompletedMissions.Count missions accomplished</p>
                </div>
            }
            else
            {
                <Hand @ref="handComponent" OnCardSelected="CardSelected" />
            }

        </CascadingValue>
    </div>
</article>

<MissionListDialog @ref="dialog" Missions="game.CompletedMissions" />

@code {

    private Game game;

    private Piles pilesComponent;
    private Hand handComponent;
    private MissionListDialog dialog;

    [Parameter, SupplyParameterFromQuery]
    public string HandSize { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string DeckSize { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string MissionDeckSize { get; set; }

    protected override void OnInitialized()
    {
        game = new Game(new GameOptions()
            {
                HandSize = int.Parse(HandSize),
                DeckSize = int.Parse(DeckSize),
                MissionDeckSize = int.Parse(MissionDeckSize)
            });
    }

    private void CardSelected(Core.Card card)
    {
        pilesComponent.Chose(card);
    }

    private void CardPlayed(Core.Card card)
    {
        StateHasChanged();
    }
}