@page "/play"

<PageTitle>Cahoots</PageTitle>

<article class="@Styles.Container">
    <div class="w-full max-w-3xl flex flex-col">
        <CascadingValue Value="game">

            <div class="flex justify-between items-center py-2 px-4 md:px-8">
                @if (game.CompletedMissions.Any())
                {
                    <div class="border-2 border-green-600 bg-green-200 text-green-900 px-4 py-2 text-center rounded-xl font-semibold text-xs md:text-base">
                        @game.LastMission
                    </div>
                }

                <div class="font-bold text-sm md:text-base xl:text-xl">
                    <span></span>
                </div>


                <div class="bg-slate-300 rounded-xl font-bold text-slate-700 px-4 py-1">
                    @game.CompletedMissions.Count missions
                </div>
            </div>

            <div class="grid grid-cols-@game.AvaliableMissions.Count gap-2 my-2">

                @foreach (var mission in game.AvaliableMissions)
                {
                    <div class="flex justify-center">
                        <MissionCard InnerMission="mission" />
                    </div>
                }
            </div>

            <Piles @ref="pilesComponent" OnCardPlayed="CardPlayed" />

            @if (game.GameHasEnded())
            {
                <div class="font-bold text-xl">
                    <span>End of game</span>
                </div>
            }
            else
            {
                <Hand @ref="handComponent" OnCardSelected="CardSelected" />

            }

        </CascadingValue>
    </div>
</article>
@code {

    private Game game;

    private Piles pilesComponent;
    private Hand handComponent;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Handsize { get; set; }

    protected override void OnInitialized()
    {
        game = new Game(new GameOptions() { HandSize = int.Parse(Handsize) });
    }

    private void CardSelected(Core.Card card)
    {
        pilesComponent.Chose(card);
    }

    private void CardPlayed(Core.Card card)
    {
        StateHasChanged();
    }
}